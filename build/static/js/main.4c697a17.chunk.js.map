{"version":3,"sources":["Optimized-path-finder/Board/interfaces.ts","Optimized-path-finder/tooltip/ToolTip.tsx","Optimized-path-finder/algorithm/Astar.ts","Optimized-path-finder/menu/Menu.tsx","Optimized-path-finder/Board/helpers.ts","Optimized-path-finder/Board/Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SquareColors","Tooltip","props","useState","visible","setVisible","className","onClick","type","checked","e","onSetStart","stopPropagation","onSetWall","onSetEnd","xmlns","style","display","viewBox","id","d","transform","cx","cy","rx","ry","x1","y1","x2","y2","points","r","Astar","matrix","aStarInstance","this","AStarFinder","grid","includeStartNode","includeEndNode","diagonalAllowed","startPos","goalPos","findPath","Menu","onStartSearch","clearAll","clearWalls","pathColor","CellSize","isDotInBoardLimit","dot","cellsLength","rowsLength","x","y","getBrowserPathPointsInCanvasFormat","path","results","repereOrigine","getRepereOriginBrowserCoordinates","forEach","p","browserCoordinates","push","boardStart","element","lx","ly","offsetLeft","offsetTop","offsetParent","getBrowserCoordinatesOfHtmlElement","document","getElementById","Board","Array","fill","map","row","board","squares","setSquares","paths","setPaths","start","setStart","end","setEnd","isThePointInAPath","point","find","addSquare","square","oldSquareIndex","findIndex","s","center","console","log","oldSquare","oldStartIndex","splice","oldEndIndex","getPathPoints","algorithmResult","getDotColor","findSquare","wall","rows","rowIdx","cells","cell","cellIdx","getMatrix","result","finShortestPath","shortestPath","undefined","newSquares","rowIndex","cellIndex","length","backgroundColor","color","width","window","innerWidth","height","innerHeight","rightCorner","getSquareRightCornerBrowserCoordinates","strokeWidth","stroke","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4c697a17.chunk.js","sourcesContent":["export interface Square {\n    center: IPoint;\n    type: \"wall\" | \"start\" | \"end\";\n    color: SquareColors;\n  }\n export enum SquareColors {\n    wall = \"#6e97cc\",\n    start = \"#3CE1BB\",\n    end = \"#ff4154\",\n  }\nexport const pathColor = \"#3CE1BB\";\nexport interface IPoint {\n    x: number;\n    y: number;\n  }\n export interface IPath {\n    points: IPoint[];\n    // canvasPoints: number[];\n  }","import React, { useState } from \"react\";\nimport \"./toolTips.css\";\ninterface TooltipProps {\n  visible?: boolean;\n  onSetStart: () => void;\n  onSetEnd: () => void;\n  onSetWall: () => void;\n}\nexport const Tooltip = (props: TooltipProps) => {\n  const [visible, setVisible] = useState<boolean>(false);\n  return (\n    <>\n      <div className=\"wrapper\" onClick={() => setVisible(true)}>\n        <input type=\"checkbox\" checked={visible} />\n        <div className=\"tooltip\">\n          <span\n            onClick={(e) => {\n              setVisible(false);\n              props.onSetStart();\n              e.stopPropagation();\n            }}\n          >\n            Start\n          </span>\n          <span\n            onClick={(e) => {\n              setVisible(false);\n              props.onSetWall();\n              e.stopPropagation();\n            }}\n          >\n            Wall\n          </span>\n          <span\n            onClick={(e) => {\n              setVisible(false);\n\n              props.onSetEnd();\n              e.stopPropagation();\n            }}\n          >\n            End\n          </span>\n          <span\n            onClick={(e) => {\n              setVisible(false);\n              e.stopPropagation();\n            }}\n          >\n            Cancel\n          </span>\n        </div>\n      </div>\n\n      <svg xmlns=\"http://www.w3.org/2000/svg\" style={{ display: \"none\" }}>\n        <symbol\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 26 22\"\n          id=\"icon-01\"\n        >\n          <path\n            d=\"M18.29,5.76l-.7-1.37A2.59,2.59,0,0,0,15.29,3H10.71a2.59,2.59,0,0,0-2.3,1.39l-.7,1.37a2.6,2.6,0,0,1-2.3,1.39H3.58A2.57,2.57,0,0,0,1,9.71V20.44A2.57,2.57,0,0,0,3.58,23H22.42A2.57,2.57,0,0,0,25,20.44V9.71a2.57,2.57,0,0,0-2.58-2.56H20.59A2.6,2.6,0,0,1,18.29,5.76Z\"\n            transform=\"translate(0 -2)\"\n          />\n          <ellipse cx=\"13\" cy=\"12.99\" rx=\"4.52\" ry=\"4.49\" />\n        </symbol>\n        <symbol\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 26 22\"\n          id=\"icon-02\"\n        >\n          <line x1=\"25\" y1=\"12.58\" x2=\"25\" y2=\"9.42\" />\n          <line x1=\"21\" y1=\"14.16\" x2=\"21\" y2=\"7.84\" />\n          <line x1=\"17\" y1=\"15.74\" x2=\"17\" y2=\"6.26\" />\n          <line x1=\"13\" y1=\"21\" x2=\"13\" y2=\"1\" />\n          <line x1=\"9\" y1=\"17.32\" x2=\"9\" y2=\"4.68\" />\n          <line x1=\"5\" y1=\"13.63\" x2=\"5\" y2=\"8.37\" />\n          <line x1=\"1\" y1=\"11.53\" x2=\"1\" y2=\"10.47\" />\n        </symbol>\n        <symbol\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 26 22\"\n          id=\"icon-03\"\n        >\n          <polygon points=\"8.08 10 1 21 25 21 18.09 12.66 13.78 17.45 8.08 10\" />\n          <circle cx=\"8\" cy=\"4\" r=\"3\" />\n        </symbol>\n      </svg>\n    </>\n  );\n};\n","import { AStarFinder } from \"astar-typescript\";\n\nexport interface IPoint {\n  x: number;\n  y: number;\n}\nclass Astar {\n\nprivate aStarInstance: AStarFinder;\n\nconstructor(matrix:number[][]) { \n    this.aStarInstance = new AStarFinder({\n        grid: {\n      matrix: matrix\n        },\n        includeStartNode: true,\n        includeEndNode: false,\n        diagonalAllowed:false,\n      });\n     }\n\n\npublic finShortestPath(startPos: IPoint, goalPos: IPoint): number[][] {\n    return this.aStarInstance.findPath(startPos, goalPos);\n}\n\n/* public AStarPostSmoothing(path: number[][]): number[][]{\n    let k=0;\n    let  t : number[][];\n    t.fill(path[0]);\n    for i IN path.length:\n        if !lineOfSight(t[k], path[i+1]){\n          k++;\n          t.push_back(path[i]);\n        }     \n    k++;\n    t.push_back(path[n]);\n    return t;\n}*/\n}\n\n\nexport default Astar;","import React from \"react\";\nimport \"./styles.css\";\ninterface MenuProps {\n  onStartSearch: () => void;\n  clearAll: () => void;\n  clearWalls: () => void;\n}\nexport const Menu = (props: MenuProps) => {\n  return (\n    <div id=\"play_panel\">\n      <p>Choose end node and start node on grid</p>\n      <button\n        className=\"menu-button\"\n        onClick={() => {\n          props.onStartSearch();\n        }}\n      >\n        Start Search\n      </button>\n      <button\n        className=\"menu-button\"\n        onClick={() => {\n          props.clearAll();\n        }}\n      >\n        Clear All\n      </button>\n      <button\n        className=\"menu-button\"\n        onClick={() => {\n          props.clearWalls();\n        }}\n      >\n        Clear Walls\n      </button>\n    </div>\n  );\n};\n","import { IPoint } from \"astar-typescript/dist/interfaces/astar.interfaces\";\nimport { IPath, Square } from \"./interfaces\";\nexport const CellSize = 50;\n\n// If a dot was in board limit, it shouldn't be clickable\nexport function isDotInBoardLimit(\n    dot: IPoint,\n    cellsLength: number,\n    rowsLength: number\n  ): boolean {\n    return dot.x + 1 === cellsLength || dot.y + 1 === rowsLength;\n  }\n// Convert from board's coordinates to browser's coordinates \n export function getBrowserPathPointsInCanvasFormat(path: IPath): number[] {\n    const results: number[] = [];\n    const repereOrigine = getRepereOriginBrowserCoordinates();\n  \n    path.points.forEach((p) => {\n      const browserCoordinates: IPoint = {\n        x: p.x * CellSize + repereOrigine.x,\n        y: p.y * CellSize + repereOrigine.y,\n      };\n      results.push(browserCoordinates.x);\n      results.push(browserCoordinates.y);\n    });\n    return results;\n  }\n//Get corners coordinates in origin repere\n export  function getSquareRightCornerBrowserCoordinates(square: Square): IPoint {\n    const repereOrigine = getRepereOriginBrowserCoordinates();\n    return {\n      x: square.center.x * CellSize - CellSize / 2 + repereOrigine.x,\n      y: square.center.y * CellSize - CellSize / 2 + repereOrigine.y,\n    };\n  }\n//\n export function getRepereOriginBrowserCoordinates(): IPoint {\n    const boardStart = getBrowserCoordinatesOfHtmlElement(\n      document.getElementById(\"board\")\n    ); // board start\n    return { x: boardStart.x + CellSize, y: boardStart.y + CellSize };\n  }\n  //To get coordinates of any html elemnt in browser repere\n  // copied from stackoverflow\n export function getBrowserCoordinatesOfHtmlElement(element: any) {\n    // yay readability\n    for (\n      var lx = 0, ly = 0;\n      element != null;\n      lx += element.offsetLeft,\n        ly += element.offsetTop,\n        element = element.offsetParent\n    );\n    return { x: lx, y: ly };\n  }\n  ","import React, { useState } from \"react\";\r\nimport { Stage, Layer, Rect, Line } from \"react-konva\";\r\nimport \"./Board.css\";\r\nimport { Tooltip } from \"../tooltip/ToolTip\";\r\nimport Astar from \"../algorithm/Astar\";\r\nimport { Menu } from \"../menu/Menu\";\r\nimport { IPath, pathColor, Square, SquareColors, IPoint } from \"./interfaces\";\r\nimport {\r\n  CellSize,\r\n  getBrowserPathPointsInCanvasFormat,\r\n  getSquareRightCornerBrowserCoordinates,\r\n  isDotInBoardLimit,\r\n} from \"./helpers\";\r\n//Create Board\r\nexport const Board = () => {\r\n  const [board] = useState(\r\n    new Array(15).fill(0).map((row) => new Array(15).fill(0))\r\n  );\r\n  const [squares, setSquares] = useState<Square[]>([]);\r\n    //nts; paths will hold the state and setPaths is the method that will allow us to update the IPath[] state.\r\n  const [paths, setPaths] = useState<IPath[]>([]);\r\n  const [start, setStart] = useState<Square>();\r\n  const [end, setEnd] = useState<Square>();\r\n\r\n  const getMatrix = () => {\r\n    const rows: number[][] = [];\r\n    board.forEach((row, rowIdx) => {\r\n      const cells: number[] = [];\r\n      row.forEach((cell, cellIdx) => {\r\n        const square = squares.find(\r\n          (s) => s.center.y === rowIdx && s.center.x === cellIdx\r\n        );\r\n        if (!square) {\r\n          cells.push(0);\r\n        } else if (square.type === \"wall\") {\r\n          cells.push(1);\r\n        } else if (square.type === \"start\" && square !== start) cells.push(1);\r\n        else if (square.type === \"end\" && square !== end) cells.push(1);\r\n        else cells.push(0);\r\n      });\r\n      rows.push(cells);\r\n    });\r\n    return rows;\r\n  };\r\n  const isThePointInAPath = (point: IPoint): boolean => {\r\n    const findPath = paths.find((path) =>\r\n      path.points.find((p) => p.x === point.x && p.y === point.y)\r\n    );\r\n    if (findPath) return true;\r\n    else return false;\r\n  };\r\n  const addSquare = (square: Square) => {\r\n    // setPath(undefined);\r\n    const oldSquareIndex = squares.findIndex(\r\n      (s) => s.center.x === square.center.x && s.center.y === square.center.y\r\n    );\r\n    console.log(isThePointInAPath(square.center));\r\n    if (oldSquareIndex >= 0) {\r\n      const oldSquare = squares[oldSquareIndex];\r\n      if (oldSquare.type === \"start\" || oldSquare.type === \"end\") {\r\n        // do nothing\r\n        return;\r\n      }\r\n    } else if (isThePointInAPath(square.center)) {\r\n      // do nothing\r\n      return;\r\n    }\r\n    if (square.type === \"start\") {\r\n      if (start) {\r\n        const oldStartIndex = squares.findIndex(\r\n          (s) => s.center.x === start.center.x && s.center.y === start.center.y\r\n        );\r\n        squares.splice(oldStartIndex, 1);\r\n        setStart(square);\r\n      } else {\r\n        setStart(square);\r\n      }\r\n    } else if (square.type === \"end\") {\r\n      if (end) {\r\n        const oldEndIndex = squares.findIndex(\r\n          (s) => s.center.x === end.center.x && s.center.y === end.center.y\r\n        );\r\n        squares.splice(oldEndIndex, 1);\r\n        setEnd(square);\r\n      } else {\r\n        setEnd(square);\r\n      }\r\n    } else {\r\n    }\r\n    if (oldSquareIndex >= 0) {\r\n      // delete the old square\r\n      squares.splice(oldSquareIndex, 1);\r\n    }\r\n\r\n    setSquares([...squares, square]);\r\n  };\r\n  const clearAll = () => {\r\n    setPaths([]);\r\n    setStart(undefined);\r\n    setEnd(undefined);\r\n    setSquares([]);\r\n  };\r\n  const clearWalls = () => {\r\n    const newSquares: Square[] = [];\r\n    squares.forEach((square) => {\r\n      if (square.type !== \"wall\") newSquares.push(square);\r\n    });\r\n    setSquares(newSquares);\r\n  };\r\n  const search = () => {\r\n    if (start && end) {\r\n      const matrix = getMatrix();\r\n      console.log(matrix);\r\n      const algorithm = new Astar(matrix);\r\n      const result = algorithm.finShortestPath(\r\n        {\r\n          x: start.center.x,\r\n          y: start.center.y,\r\n        },\r\n        {\r\n          x: end.center.x,\r\n          y: end.center.y,\r\n        }\r\n      );\r\n      const shortestPath = getPathPoints(result);\r\n      setPaths([...paths, shortestPath]);\r\n      setStart(undefined);\r\n      setEnd(undefined);\r\n    }\r\n  };\r\n  const getPathPoints = (algorithmResult: number[][]): IPath => {\r\n    const path: IPath = { points: [] };\r\n    algorithmResult.forEach((point: number[]) => {\r\n      path.points.push({\r\n        x: point[0],\r\n        y: point[1],\r\n      });\r\n    });\r\n\r\n    return path;\r\n  };\r\n  const getDotColor = (dot: IPoint): string => {\r\n    const findSquare = squares.find(\r\n      (square) => square.center.x === dot.x && square.center.y === dot.y\r\n    );\r\n    if (findSquare) {\r\n      if (findSquare.type === \"start\") return SquareColors.start;\r\n      else if (findSquare.type === \"end\") return SquareColors.end;\r\n      else return SquareColors.wall;\r\n    } else if (isThePointInAPath(dot)) {\r\n      // check if there's a path cross this dot\r\n      return pathColor;\r\n    }\r\n    return SquareColors.wall;\r\n  };\r\n\r\n  return (\r\n    <div id=\"board\" className=\"board\">\r\n      <Menu\r\n        onStartSearch={search}\r\n        clearAll={clearAll}\r\n        clearWalls={clearWalls}\r\n      />\r\n      {board.map((row, rowIndex) => (\r\n        <div key={rowIndex} className=\"row\">\r\n          {row.map((cell, cellIndex) => {\r\n            const dot: IPoint = { x: cellIndex, y: rowIndex };\r\n            return (\r\n              <div key={dot.x} className=\"cell\">\r\n                {!isDotInBoardLimit(dot, row.length, board.length) && (\r\n                  <div\r\n                    className=\"dot\"\r\n                    style={{\r\n                      backgroundColor: getDotColor(dot),\r\n                    }}\r\n                    onClick={() => {\r\n                      console.log(`x :${dot.x} , y: ${dot.y}`);\r\n                    }}\r\n                  >\r\n                    <Tooltip\r\n                      onSetEnd={() => {\r\n                        addSquare({\r\n                          center: dot,\r\n                          type: \"end\",\r\n                          color: SquareColors.end,\r\n                        });\r\n                      }}\r\n                      onSetStart={() => {\r\n                        addSquare({\r\n                          center: dot,\r\n                          type: \"start\",\r\n                          color: SquareColors.start,\r\n                        });\r\n                      }}\r\n                      onSetWall={() => {\r\n                        addSquare({\r\n                          center: dot,\r\n                          type: \"wall\",\r\n                          color: SquareColors.wall,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      ))}\r\n      <Stage width={window.innerWidth} height={window.innerHeight}>\r\n        <Layer>\r\n          {squares.map((square) => {\r\n            const rightCorner = getSquareRightCornerBrowserCoordinates(square);\r\n            return (\r\n              <Rect\r\n                x={rightCorner.x}\r\n                y={rightCorner.y}\r\n                width={CellSize}\r\n                height={CellSize}\r\n                onClick={(e) => {}}\r\n                fill={square.color}\r\n              />\r\n            );\r\n          })}\r\n          {paths.map((path) => (\r\n            <Line\r\n              points={getBrowserPathPointsInCanvasFormat(path)}\r\n              strokeWidth={4}\r\n              // tension={0.1}\r\n              stroke={pathColor}\r\n            />\r\n          ))}\r\n        </Layer>\r\n      </Stage>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import {Board} from './Optimized-path-finder/Board/Board';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board></Board>\n    </div>\n  );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}