{"version":3,"sources":["Optimized-path-finder/Board/interfaces.ts","Optimized-path-finder/tooltip/ToolTip.tsx","Optimized-path-finder/menu/Menu.tsx","Optimized-path-finder/Board/helpers.ts","Optimized-path-finder/Board/Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SquareColors","Tooltip","props","useState","visible","setVisible","className","onClick","type","checked","e","onSetStart","stopPropagation","onSetWall","onSetEnd","xmlns","style","display","viewBox","id","d","transform","cx","cy","rx","ry","x1","y1","x2","y2","points","r","Menu","onStartSearch","clearAll","clearWalls","pathColor","CellSize","isDotInBoardLimit","dot","cellsLength","rowsLength","x","y","getBrowserPathPointsInCanvasFormat","path","results","repereOrigine","getRepereOriginBrowserCoordinates","forEach","p","browserCoordinates","push","boardStart","element","lx","ly","offsetLeft","offsetTop","offsetParent","getBrowserCoordinatesOfHtmlElement","document","getElementById","Board","Array","fill","map","row","board","squares","setSquares","paths","setPaths","start","setStart","end","setEnd","getMatrix","rows","rowIdx","cells","cell","cellIdx","square","find","s","center","isThePointInAPath","point","addSquare","oldSquareIndex","findIndex","console","log","oldSquare","oldStartIndex","splice","oldEndIndex","search","a","matrix","pathfinding","grid","result","shortestPath","data","shortPath","isShortest","undefined","getDotColor","findSquare","wall","newSquares","rowIndex","cellIndex","length","backgroundColor","color","width","window","innerWidth","height","innerHeight","rightCorner","getSquareRightCornerBrowserCoordinates","strokeWidth","stroke","app","initializeApp","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","functions","getFunctions","httpsCallable","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.85cf53ea.chunk.js","sourcesContent":["export interface Square {\r\n    center: IPoint;\r\n    type: \"wall\" | \"start\" | \"end\";\r\n    color: SquareColors;\r\n  }\r\n export enum SquareColors {\r\n    wall = \"#6e97cc\",\r\n    start = \"#3CE1BB\",\r\n    end = \"#ff4154\",\r\n  }\r\nexport const pathColor = \"#3CE1BB\";\r\nexport const pathShortestColor = \"#ffffff\";\r\nexport interface IPoint {\r\n    x: number;\r\n    y: number;\r\n  }\r\n export interface IPath {\r\n    points: IPoint[];\r\n    isShortest?: boolean;\r\n    // canvasPoints: number[];\r\n  }","import React, { useState } from \"react\";\r\nimport \"./toolTips.css\";\r\ninterface TooltipProps {\r\n  visible?: boolean;\r\n  onSetStart: () => void;\r\n  onSetEnd: () => void;\r\n  onSetWall: () => void;\r\n}\r\nexport const Tooltip = (props: TooltipProps) => {\r\n  const [visible, setVisible] = useState<boolean>(false);\r\n  return (\r\n    <>\r\n      <div className=\"wrapper\" onClick={() => setVisible(true)}>\r\n        <input type=\"checkbox\" checked={visible} />\r\n        <div className=\"tooltip\">\r\n          <span\r\n            onClick={(e) => {\r\n              setVisible(false);\r\n              props.onSetStart();\r\n              e.stopPropagation();\r\n            }}\r\n          >\r\n            Start\r\n          </span>\r\n          <span\r\n            onClick={(e) => {\r\n              setVisible(false);\r\n              props.onSetWall();\r\n              e.stopPropagation();\r\n            }}\r\n          >\r\n            Wall\r\n          </span>\r\n          <span\r\n            onClick={(e) => {\r\n              setVisible(false);\r\n\r\n              props.onSetEnd();\r\n              e.stopPropagation();\r\n            }}\r\n          >\r\n            End\r\n          </span>\r\n          <span\r\n            onClick={(e) => {\r\n              setVisible(false);\r\n              e.stopPropagation();\r\n            }}\r\n          >\r\n            Cancel\r\n          </span>\r\n        </div>\r\n      </div>\r\n\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" style={{ display: \"none\" }}>\r\n        <symbol\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 26 22\"\r\n          id=\"icon-01\"\r\n        >\r\n          <path\r\n            d=\"M18.29,5.76l-.7-1.37A2.59,2.59,0,0,0,15.29,3H10.71a2.59,2.59,0,0,0-2.3,1.39l-.7,1.37a2.6,2.6,0,0,1-2.3,1.39H3.58A2.57,2.57,0,0,0,1,9.71V20.44A2.57,2.57,0,0,0,3.58,23H22.42A2.57,2.57,0,0,0,25,20.44V9.71a2.57,2.57,0,0,0-2.58-2.56H20.59A2.6,2.6,0,0,1,18.29,5.76Z\"\r\n            transform=\"translate(0 -2)\"\r\n          />\r\n          <ellipse cx=\"13\" cy=\"12.99\" rx=\"4.52\" ry=\"4.49\" />\r\n        </symbol>\r\n        <symbol\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 26 22\"\r\n          id=\"icon-02\"\r\n        >\r\n          <line x1=\"25\" y1=\"12.58\" x2=\"25\" y2=\"9.42\" />\r\n          <line x1=\"21\" y1=\"14.16\" x2=\"21\" y2=\"7.84\" />\r\n          <line x1=\"17\" y1=\"15.74\" x2=\"17\" y2=\"6.26\" />\r\n          <line x1=\"13\" y1=\"21\" x2=\"13\" y2=\"1\" />\r\n          <line x1=\"9\" y1=\"17.32\" x2=\"9\" y2=\"4.68\" />\r\n          <line x1=\"5\" y1=\"13.63\" x2=\"5\" y2=\"8.37\" />\r\n          <line x1=\"1\" y1=\"11.53\" x2=\"1\" y2=\"10.47\" />\r\n        </symbol>\r\n        <symbol\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 26 22\"\r\n          id=\"icon-03\"\r\n        >\r\n          <polygon points=\"8.08 10 1 21 25 21 18.09 12.66 13.78 17.45 8.08 10\" />\r\n          <circle cx=\"8\" cy=\"4\" r=\"3\" />\r\n        </symbol>\r\n      </svg>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\ninterface MenuProps {\r\n  onStartSearch: () => void;\r\n  clearAll: () => void;\r\n  clearWalls: () => void;\r\n}\r\nexport const Menu = (props: MenuProps) => {\r\n  return (\r\n    <div id=\"play_panel\">\r\n      <p>Choose end node and start node on grid</p>\r\n      <button\r\n        className=\"menu-button\"\r\n        onClick={() => {\r\n          props.onStartSearch();\r\n        }}\r\n      >\r\n        Start Search\r\n      </button>\r\n      <button\r\n        className=\"menu-button\"\r\n        onClick={() => {\r\n          props.clearAll();\r\n        }}\r\n      >\r\n        Clear All\r\n      </button>\r\n      <button\r\n        className=\"menu-button\"\r\n        onClick={() => {\r\n          props.clearWalls();\r\n        }}\r\n      >\r\n        Clear Walls\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import { IPoint } from \"astar-typescript/dist/interfaces/astar.interfaces\";\r\nimport { IPath, Square } from \"./interfaces\";\r\nexport const CellSize = 50;\r\n\r\n// If a dot was in board limit, it shouldn't be clickable\r\nexport function isDotInBoardLimit(\r\n    dot: IPoint,\r\n    cellsLength: number,\r\n    rowsLength: number\r\n  ): boolean {\r\n    return dot.x + 1 === cellsLength || dot.y + 1 === rowsLength;\r\n  }\r\n// Convert from board's coordinates to browser's coordinates \r\n export function getBrowserPathPointsInCanvasFormat(path: IPath): number[] {\r\n    const results: number[] = [];\r\n    const repereOrigine = getRepereOriginBrowserCoordinates();\r\n  \r\n    path.points.forEach((p) => {\r\n      const browserCoordinates: IPoint = {\r\n        x: p.x * CellSize + repereOrigine.x,\r\n        y: p.y * CellSize + repereOrigine.y,\r\n      };\r\n      results.push(browserCoordinates.x);\r\n      results.push(browserCoordinates.y);\r\n    });\r\n    return results;\r\n  }\r\n//Get corners coordinates in origin repere\r\n export  function getSquareRightCornerBrowserCoordinates(square: Square): IPoint {\r\n    const repereOrigine = getRepereOriginBrowserCoordinates();\r\n    return {\r\n      x: square.center.x * CellSize - CellSize / 2 + repereOrigine.x,\r\n      y: square.center.y * CellSize - CellSize / 2 + repereOrigine.y,\r\n    };\r\n  }\r\n//\r\n export function getRepereOriginBrowserCoordinates(): IPoint {\r\n    const boardStart = getBrowserCoordinatesOfHtmlElement(\r\n      document.getElementById(\"board\")\r\n    ); // board start\r\n    return { x: boardStart.x + CellSize, y: boardStart.y + CellSize };\r\n  }\r\n  //To get coordinates of any html elemnt in browser repere\r\n  // copied from stackoverflow\r\n export function getBrowserCoordinatesOfHtmlElement(element: any) {\r\n    // yay readability\r\n    for (\r\n      var lx = 0, ly = 0;\r\n      element != null;\r\n      lx += element.offsetLeft,\r\n        ly += element.offsetTop,\r\n        element = element.offsetParent\r\n    );\r\n    return { x: lx, y: ly };\r\n  }\r\n  ","import React, { useState } from \"react\";\r\nimport { Stage, Layer, Rect, Line } from \"react-konva\";\r\nimport \"./Board.css\";\r\nimport { Tooltip } from \"../tooltip/ToolTip\";\r\nimport Astar from \"../algorithm/Astar\";\r\nimport { Menu } from \"../menu/Menu\";\r\nimport { IPath, pathColor, Square, SquareColors, IPoint, pathShortestColor } from \"./interfaces\";\r\nimport {\r\n  CellSize,\r\n  getBrowserPathPointsInCanvasFormat,\r\n  getSquareRightCornerBrowserCoordinates,\r\n  isDotInBoardLimit,\r\n} from \"./helpers\";\r\nimport { pathfinding } from \"../../App\";\r\n//Create Board\r\nexport const Board = () => {\r\n  const [board] = useState(\r\n    new Array(15).fill(0).map((row) => new Array(15).fill(0))\r\n  );\r\n  const [squares, setSquares] = useState<Square[]>([]);\r\n    //nts; paths will hold the state and setPaths is the method that will allow us to update the IPath[] state.\r\n  const [paths, setPaths] = useState<IPath[]>([]);\r\n  const [start, setStart] = useState<Square>();\r\n  const [end, setEnd] = useState<Square>();\r\n\r\n  const getMatrix = () => {\r\n    const rows: number[][] = [];\r\n    board.forEach((row, rowIdx) => {\r\n      const cells: number[] = [];\r\n      row.forEach((cell, cellIdx) => {\r\n        const square = squares.find(\r\n          (s) => s.center.y === rowIdx && s.center.x === cellIdx\r\n        );\r\n        if (!square) {\r\n          cells.push(0);\r\n        } else if (square.type === \"wall\") {\r\n          cells.push(1);\r\n        } else if (square.type === \"start\" && square !== start) cells.push(1);\r\n        else if (square.type === \"end\" && square !== end) cells.push(1);\r\n        else cells.push(0);\r\n      });\r\n      rows.push(cells);\r\n    });\r\n    return rows;\r\n  };\r\n  const isThePointInAPath = (point: IPoint): boolean => {\r\n    const findPath = paths.find((path) =>\r\n      path.points.find((p) => p.x === point.x && p.y === point.y)\r\n    );\r\n    if (findPath) return true;\r\n    else return false;\r\n  };\r\n  const addSquare = (square: Square) => {\r\n    // setPath(undefined);\r\n    const oldSquareIndex = squares.findIndex(\r\n      (s) => s.center.x === square.center.x && s.center.y === square.center.y\r\n    );\r\n    console.log(isThePointInAPath(square.center));\r\n    if (oldSquareIndex >= 0) {\r\n      const oldSquare = squares[oldSquareIndex];\r\n      if (oldSquare.type === \"start\" || oldSquare.type === \"end\") {\r\n        // do nothing\r\n        return;\r\n      }\r\n    } else if (isThePointInAPath(square.center)) {\r\n      // do nothing\r\n      return;\r\n    }\r\n    if (square.type === \"start\") {\r\n      if (start) {\r\n        const oldStartIndex = squares.findIndex(\r\n          (s) => s.center.x === start.center.x && s.center.y === start.center.y\r\n        );\r\n        squares.splice(oldStartIndex, 1);\r\n        setStart(square);\r\n      } else {\r\n        setStart(square);\r\n      }\r\n    } else if (square.type === \"end\") {\r\n      if (end) {\r\n        const oldEndIndex = squares.findIndex(\r\n          (s) => s.center.x === end.center.x && s.center.y === end.center.y\r\n        );\r\n        squares.splice(oldEndIndex, 1);\r\n        setEnd(square);\r\n      } else {\r\n        setEnd(square);\r\n      }\r\n    } else {\r\n    }\r\n    if (oldSquareIndex >= 0) {\r\n      // delete the old square\r\n      squares.splice(oldSquareIndex, 1);\r\n    }\r\n\r\n    setSquares([...squares, square]);\r\n  };\r\n  const clearAll = () => {\r\n    setPaths([]);\r\n    setStart(undefined);\r\n    setEnd(undefined);\r\n    setSquares([]);\r\n  };\r\n  const clearWalls = () => {\r\n    const newSquares: Square[] = [];\r\n    squares.forEach((square) => {\r\n      if (square.type !== \"wall\") newSquares.push(square);\r\n    });\r\n    setSquares(newSquares);\r\n  };\r\n  const search = async () => {\r\n    if (start && end) {\r\n      const matrix = getMatrix();\r\n      console.log(matrix);\r\n      const result = await pathfinding({\r\n        start: start.center,\r\n        end: end.center,\r\n        grid: matrix,\r\n      });\r\n      const shortestPath: IPath[] = result.data as IPath[];\r\n      console.log(shortestPath)\r\n     // const algorithm = new Astar(matrix);\r\n/*       const result = algorithm.finShortestPath(\r\n        {\r\n          x: start.center.x,\r\n          y: start.center.y,\r\n        },\r\n        {\r\n          x: end.center.x,\r\n          y: end.center.y,\r\n        }\r\n      ); */\r\n     // const shortestPath = getPathPoints(result);\r\n     const shortPath = shortestPath.find(path=>path.isShortest) \r\n      //setPaths([...paths, ...shortestPath]);\r\n      if(shortPath)\r\n      setPaths([...paths, shortPath]);\r\n      setStart(undefined);\r\n      setEnd(undefined);\r\n    }\r\n  };\r\n  const getPathPoints = (algorithmResult: number[][]): IPath => {\r\n    const path: IPath = { points: [] };\r\n    algorithmResult.forEach((point: number[]) => {\r\n      path.points.push({\r\n        x: point[0],\r\n        y: point[1],\r\n      });\r\n    });\r\n\r\n    return path;\r\n  };\r\n  const getDotColor = (dot: IPoint): string => {\r\n    const findSquare = squares.find(\r\n      (square) => square.center.x === dot.x && square.center.y === dot.y\r\n    );\r\n    if (findSquare) {\r\n      if (findSquare.type === \"start\") return SquareColors.start;\r\n      else if (findSquare.type === \"end\") return SquareColors.end;\r\n      else return SquareColors.wall;\r\n    } else if (isThePointInAPath(dot)) {\r\n      // check if there's a path cross this dot\r\n      return pathColor;\r\n    }\r\n    return SquareColors.wall;\r\n  };\r\n\r\n  return (\r\n    <div id=\"board\" className=\"board\">\r\n      <Menu\r\n        onStartSearch={search}\r\n        clearAll={clearAll}\r\n        clearWalls={clearWalls}\r\n      />\r\n      {board.map((row, rowIndex) => (\r\n        <div key={rowIndex} className=\"row\">\r\n          {row.map((cell, cellIndex) => {\r\n            const dot: IPoint = { x: cellIndex, y: rowIndex };\r\n            return (\r\n              <div key={dot.x} className=\"cell\">\r\n                {!isDotInBoardLimit(dot, row.length, board.length) && (\r\n                  <div\r\n                    className=\"dot\"\r\n                    style={{\r\n                      backgroundColor: getDotColor(dot),\r\n                    }}\r\n                    onClick={() => {\r\n                      console.log(`x :${dot.x} , y: ${dot.y}`);\r\n                    }}\r\n                  >\r\n                    <Tooltip\r\n                      onSetEnd={() => {\r\n                        addSquare({\r\n                          center: dot,\r\n                          type: \"end\",\r\n                          color: SquareColors.end,\r\n                        });\r\n                      }}\r\n                      onSetStart={() => {\r\n                        addSquare({\r\n                          center: dot,\r\n                          type: \"start\",\r\n                          color: SquareColors.start,\r\n                        });\r\n                      }}\r\n                      onSetWall={() => {\r\n                        addSquare({\r\n                          center: dot,\r\n                          type: \"wall\",\r\n                          color: SquareColors.wall,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      ))}\r\n      <Stage width={window.innerWidth} height={window.innerHeight}>\r\n        <Layer>\r\n          {squares.map((square) => {\r\n            const rightCorner = getSquareRightCornerBrowserCoordinates(square);\r\n            return (\r\n              <Rect\r\n                x={rightCorner.x}\r\n                y={rightCorner.y}\r\n                width={CellSize}\r\n                height={CellSize}\r\n                onClick={(e) => {}}\r\n                fill={square.color}\r\n              />\r\n            );\r\n          })}\r\n          {paths.map((path) => (\r\n            <Line\r\n              points={getBrowserPathPointsInCanvasFormat(path)}\r\n              strokeWidth={4}\r\n              // tension={0.1}\r\n              stroke={path.isShortest? pathShortestColor: pathColor}\r\n            />\r\n          ))}\r\n        </Layer>\r\n      </Stage>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import {Board} from './Optimized-path-finder/Board/Board';\r\nimport './App.css';\r\nimport { initializeApp } from 'firebase/app';\r\nimport { connectFunctionsEmulator, getFunctions, httpsCallable } from 'firebase/functions';\r\n\r\n\r\nconst firebaseConfig = {\r\n   \r\n    authDomain: \"optimized-path-finder-1a74f.firebaseapp.com\",\r\n    projectId: \"optimized-path-finder-1a74f\",\r\n    storageBucket: \"optimized-path-finder-1a74f.appspot.com\",\r\n    messagingSenderId: \"221335645760\",\r\n    appId: \"1:221335645760:web:ed229600239c9909a339a5\",\r\n    measurementId: \"G-1ZGCWNPC48\"\r\n};\r\nconst app = initializeApp(firebaseConfig);\r\nconst functions = getFunctions(app);\r\n\r\nexport const pathfinding = httpsCallable(functions, 'pathfinding');\r\n// connectFunctionsEmulator(functions, \"localhost\", 5001);\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Board></Board>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}