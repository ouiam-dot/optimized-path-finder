{"version":3,"sources":["Optimized-path-finder/Board/Board.tsx","Optimized-path-finder/tooltip/ToolTip.tsx","Optimized-path-finder/Aaesterisk.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SquareColors","Tooltip","props","useState","visible","setVisible","className","onClick","type","checked","e","onSetStart","stopPropagation","onSetWall","onSetEnd","xmlns","style","display","viewBox","id","d","transform","cx","cy","rx","ry","x1","y1","x2","y2","points","r","Aaesterisk","matrix","aStarInstance","this","AStarFinder","grid","includeStartNode","includeEndNode","diagonalAllowed","startPos","goalPos","findPath","Board","Array","fill","map","row","board","squares","setSquares","path","setPath","addSquare","square","undefined","oldSquareIndex","findIndex","s","center","cell","splice","oldStartIndex","oldEndIndex","start","find","end","rows","forEach","rowIdx","cells","cellIdx","push","getMatrix","result","finShortestPath","x","y","shortestPath","convertPathPoints","algorithmResult","canvasPoints","boardStart","getPos","document","getElementById","point","getDotColor","findSquare","wall","length","backgroundColor","rightCorner","color","width","window","innerWidth","height","innerHeight","tension","stroke","element","lx","ly","offsetLeft","offsetTop","offsetParent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.87627216.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Stage, Layer, Rect, Line } from \"react-konva\";\nimport \"./Board.css\";\nimport { Tooltip } from \"../tooltip/ToolTip\";\nimport Aaesterisk from \"../Aaesterisk\";\ninterface Square {\n  center: Point;\n  rightCorner: Point;\n  type: \"wall\" | \"start\" | \"end\";\n  color: string;\n}\nenum SquareColors {\n  wall = \"#6e97cc\",\n  start = \"#3CE1BB\",\n  end = \"#ff4154\",\n}\ninterface Point {\n  x: number;\n  cell: number;\n  row: number;\n  y: number;\n}\ninterface IPath {\n  points: Point[];\n  canvasPoints: number[];\n}\nexport const Board = () => {\n  const [board] = useState(\n    new Array(20).fill(0).map((row) => new Array(20).fill(0))\n  );\n  const [squares, setSquares] = useState<Square[]>([]);\n  const [path, setPath] = useState<IPath>();\n  const getMatrix = () => {\n    const rows: number[][] = [];\n    board.forEach((row, rowIdx) => {\n      const cells: number[] = [];\n      row.forEach((cell, cellIdx) => {\n        const square = squares.find(\n          (s) => s.center.row === rowIdx + 1 && s.center.cell === cellIdx\n        );\n        if (!square) {\n          cells.push(0);\n        } else if (square.type === \"wall\") {\n          cells.push(1);\n        }\n      });\n      rows.push(cells);\n    });\n    return rows;\n  };\n  // const [boardStart ,setBoardStart] = useState<Point>();\n  const addSquare = (square: Square) => {\n    setPath(undefined);\n    const oldSquareIndex = squares.findIndex(\n      (s) =>\n        s.center.row === square.center.row &&\n        s.center.cell === square.center.cell\n    );\n    if (oldSquareIndex >= 0) {\n      if (oldSquareIndex >= 0) squares.splice(oldSquareIndex, 1);\n    }\n    if (square.type === \"start\") {\n      const oldStartIndex = squares.findIndex((s) => s.type === \"start\");\n      if (oldStartIndex >= 0) squares.splice(oldStartIndex, 1);\n    }\n    if (square.type === \"start\") {\n      const oldStartIndex = squares.findIndex((s) => s.type === \"start\");\n      if (oldStartIndex >= 0) squares.splice(oldStartIndex, 1);\n    }\n    if (square.type === \"end\") {\n      const oldEndIndex = squares.findIndex((s) => s.type === \"end\");\n      if (oldEndIndex >= 0) squares.splice(oldEndIndex, 1);\n    }\n    setSquares([...squares, square]);\n\n    const start = squares.find((s) => s.type === \"start\");\n    const end = squares.find((s) => s.type === \"end\");\n    if (start && end) {\n      const matrix = getMatrix();\n      const algorithm = new Aaesterisk(matrix);\n      const result = algorithm.finShortestPath(\n        {\n          x: start.center.cell - 1,\n          y: start.center.row - 1,\n        },\n        {\n          x: end.center.cell - 1,\n          y: end.center.row - 1,\n        }\n      );\n      const shortestPath = convertPathPoints(result);\n      setPath(shortestPath);\n    }\n  };\n  const convertPathPoints = (algorithmResult: number[][]): IPath => {\n    const path: IPath = { points: [], canvasPoints: [] };\n    const boardStart = getPos(document.getElementById(\"board\"));\n    algorithmResult.forEach((point: number[]) => {\n      path.points.push({\n        x: (point[0] + 1) * 50 + boardStart.x,\n        y: (point[1] + 1) * 50 + boardStart.y,\n        cell: point[0] + 1,\n        row: point[1] + 1,\n      });\n    });\n    path.points.forEach((point) => {\n      path.canvasPoints.push(point.x);\n      path.canvasPoints.push(point.y);\n    });\n    return path;\n  };\n  const getDotColor = (cell: number, row: number): string => {\n    const findSquare = squares.find(\n      (square) =>\n        square.center.cell === cell + 1 && square.center.row === row + 1\n    );\n    if (findSquare) {\n      if (findSquare.type === \"start\") return SquareColors.start;\n      else if (findSquare.type === \"end\") return SquareColors.end;\n      else return SquareColors.wall;\n    } else return SquareColors.wall;\n  };\n  return (\n    <div id=\"board\" className=\"board\">\n      {board.map((row, rowIdx) => (\n        <div key={rowIdx} className=\"row\">\n          {row.map((cell, cellIdx) => {\n            return (\n              <div key={cellIdx} className=\"cell\">\n                {cellIdx + 1 !== row.length && rowIdx + 1 !== board.length && (\n                  <div\n                    className=\"dot\"\n                    style={{ backgroundColor: getDotColor(cellIdx, rowIdx) }}\n                  >\n                    <Tooltip\n                      onSetEnd={() => {\n                        const boardStart = getPos(\n                          document.getElementById(\"board\")\n                        );\n                        addSquare({\n                          center: {\n                            x: (cellIdx + 1) * 50 + boardStart.x,\n                            y: (rowIdx + 1) * 50 + boardStart.y,\n                            cell: cellIdx + 1,\n                            row: rowIdx + 1,\n                          },\n                          rightCorner: {\n                            x: cellIdx * 50 + 25 + boardStart.x,\n                            y: rowIdx * 50 + 25 + boardStart.y,\n                            cell: cellIdx,\n                            row: rowIdx,\n                          },\n                          type: \"end\",\n                          color: SquareColors.end,\n                        });\n                      }}\n                      onSetStart={() => {\n                        const boardStart = getPos(\n                          document.getElementById(\"board\")\n                        );\n                        addSquare({\n                          center: {\n                            x: (cellIdx + 1) * 50 + boardStart.x,\n                            y: (rowIdx + 1) * 50 + boardStart.y,\n                            cell: cellIdx + 1,\n                            row: rowIdx + 1,\n                          },\n                          rightCorner: {\n                            x: cellIdx * 50 + 25 + boardStart.x,\n                            y: rowIdx * 50 + 25 + boardStart.y,\n                            cell: cellIdx,\n                            row: rowIdx,\n                          },\n                          type: \"start\",\n                          color: SquareColors.start,\n                        });\n                      }}\n                      onSetWall={() => {\n                        const boardStart = getPos(\n                          document.getElementById(\"board\")\n                        );\n                        addSquare({\n                          center: {\n                            x: (cellIdx + 1) * 50 + boardStart.x,\n                            y: (rowIdx + 1) * 50 + boardStart.y,\n                            cell: cellIdx + 1,\n                            row: rowIdx + 1,\n                          },\n                          rightCorner: {\n                            x: cellIdx * 50 + 25 + boardStart.x,\n                            y: rowIdx * 50 + 25 + boardStart.y,\n                            cell: cellIdx,\n                            row: rowIdx,\n                          },\n                          type: \"wall\",\n                          color: SquareColors.wall,\n                        });\n                      }}\n                    />\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      ))}\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          {squares.map((square) => {\n            return (\n              <Rect\n                x={square.rightCorner.x}\n                y={square.rightCorner.y}\n                width={50}\n                height={50}\n                onClick={(e) => {}}\n                fill={square.color}\n              />\n            );\n          })}\n          {path && (\n            <Line\n              points={path.canvasPoints}\n              tension={0.1}\n              stroke={SquareColors.start}\n            />\n          )}\n        </Layer>\n      </Stage>\n    </div>\n  );\n};\nfunction getPos(element: any) {\n  // yay readability\n  for (\n    var lx = 0, ly = 0;\n    element != null;\n    lx += element.offsetLeft,\n      ly += element.offsetTop,\n      element = element.offsetParent\n  );\n  return { x: lx, y: ly };\n}\nexport default Board;\n","import React, { useState } from \"react\";\nimport \"./toolTips.css\";\ninterface TooltipProps {\n  visible?: boolean;\n  onSetStart: () => void;\n  onSetEnd: () => void;\n  onSetWall: () => void;\n}\nexport const Tooltip = (props: TooltipProps) => {\n  const [visible, setVisible] = useState<boolean>(false);\n  return (\n    <>\n      <div className=\"wrapper\" onClick={() => setVisible(true)}>\n        <input type=\"checkbox\" checked={visible} />\n        {/* <div className=\"btn\"></div> */}\n        <div className=\"tooltip\">\n          <span\n            onClick={(e) => {\n              setVisible(false);\n              props.onSetStart();\n              e.stopPropagation();\n            }}\n          >\n            Start\n          </span>\n          <span\n            onClick={(e) => {\n              setVisible(false);\n              props.onSetWall();\n              e.stopPropagation();\n            }}\n          >\n            Wall\n          </span>\n          <span\n            onClick={(e) => {\n              setVisible(false);\n\n              props.onSetEnd();\n              e.stopPropagation();\n            }}\n          >\n            End\n          </span>\n        </div>\n      </div>\n\n      <svg xmlns=\"http://www.w3.org/2000/svg\" style={{ display: \"none\" }}>\n        <symbol\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 26 22\"\n          id=\"icon-01\"\n        >\n          <path\n            d=\"M18.29,5.76l-.7-1.37A2.59,2.59,0,0,0,15.29,3H10.71a2.59,2.59,0,0,0-2.3,1.39l-.7,1.37a2.6,2.6,0,0,1-2.3,1.39H3.58A2.57,2.57,0,0,0,1,9.71V20.44A2.57,2.57,0,0,0,3.58,23H22.42A2.57,2.57,0,0,0,25,20.44V9.71a2.57,2.57,0,0,0-2.58-2.56H20.59A2.6,2.6,0,0,1,18.29,5.76Z\"\n            transform=\"translate(0 -2)\"\n          />\n          <ellipse cx=\"13\" cy=\"12.99\" rx=\"4.52\" ry=\"4.49\" />\n        </symbol>\n        <symbol\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 26 22\"\n          id=\"icon-02\"\n        >\n          <line x1=\"25\" y1=\"12.58\" x2=\"25\" y2=\"9.42\" />\n          <line x1=\"21\" y1=\"14.16\" x2=\"21\" y2=\"7.84\" />\n          <line x1=\"17\" y1=\"15.74\" x2=\"17\" y2=\"6.26\" />\n          <line x1=\"13\" y1=\"21\" x2=\"13\" y2=\"1\" />\n          <line x1=\"9\" y1=\"17.32\" x2=\"9\" y2=\"4.68\" />\n          <line x1=\"5\" y1=\"13.63\" x2=\"5\" y2=\"8.37\" />\n          <line x1=\"1\" y1=\"11.53\" x2=\"1\" y2=\"10.47\" />\n        </symbol>\n        <symbol\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 26 22\"\n          id=\"icon-03\"\n        >\n          <polygon points=\"8.08 10 1 21 25 21 18.09 12.66 13.78 17.45 8.08 10\" />\n          <circle cx=\"8\" cy=\"4\" r=\"3\" />\n        </symbol>\n      </svg>\n    </>\n  );\n};\n","import { AStarFinder } from \"astar-typescript\";\nimport {  IPoint } from \"astar-typescript/dist/interfaces/astar.interfaces\";\n\n// let myMatrix = [\n//     [0, 0, 0, 0, 0, 0, 0, 0],\n//     [0, 0, 0, 0, 0, 0, 0, 1],\n//     [0, 0, 1, 1, 0, 1, 1, 0],\n//     [0, 0, 1, 0, 0, 0, 1, 0],\n//     [0, 0, 0, 0, 0, 0, 1, 0],\n//     [1, 1, 1, 0, 1, 0, 1, 0],\n//     [0, 0, 0, 0, 1, 0, 1, 0],\n//     [0, 0, 1, 0, 0, 0, 0, 0]\n//   ];\n// let startPos = { x: 0, y: 0 };\n// let goalPos = { x: 4, y: 5 };\nclass Aaesterisk {\n\nprivate aStarInstance: AStarFinder;\n\nconstructor(matrix:number[][]) { \n    this.aStarInstance = new AStarFinder({\n        grid: {\n      matrix: matrix\n        },\n        includeStartNode: true,\n        includeEndNode: true,\n        diagonalAllowed:false,\n      });\n     }\n\n\npublic finShortestPath(startPos: IPoint, goalPos: IPoint): number[][] {\n    return this.aStarInstance.findPath(startPos, goalPos);\n}\n}\nexport default Aaesterisk;","import {Board} from './Optimized-path-finder/Board/Board';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board></Board>\n    </div>\n  );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}