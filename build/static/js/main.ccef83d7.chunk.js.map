{"version":3,"sources":["Optimized-path-finder/Board/interfaces.ts","Optimized-path-finder/tooltip/ToolTip.tsx","Optimized-path-finder/menu/Menu.tsx","Optimized-path-finder/Board/helpers.ts","Optimized-path-finder/Board/Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SquareColors","Tooltip","props","useState","visible","setVisible","className","onClick","type","checked","e","onSetStart","stopPropagation","onSetWall","onSetEnd","xmlns","style","display","viewBox","id","d","transform","cx","cy","rx","ry","x1","y1","x2","y2","points","r","pathColor","pathShortestColor","Menu","onStartSearch","clearAll","clearWalls","ShowAllPaths","backgroundColor","CellSize","isDotInBoardLimit","dot","cellsLength","rowsLength","x","y","getBrowserPathPointsInCanvasFormat","path","results","repereOrigine","getRepereOriginBrowserCoordinates","forEach","p","browserCoordinates","push","boardStart","element","lx","ly","offsetLeft","offsetTop","offsetParent","getBrowserCoordinatesOfHtmlElement","document","getElementById","Board","Array","fill","map","row","board","squares","setSquares","paths","setPaths","start","setStart","end","setEnd","showAllPaths","setShowAllPaths","getMatrix","rows","rowIdx","cells","cell","cellIdx","square","find","s","center","isThePointInAPath","point","findPath","isShortest","addSquare","oldSquareIndex","findIndex","console","log","oldSquare","oldStartIndex","splice","oldEndIndex","search","a","matrix","pathfinding","grid","result","shortestPaths","data","undefined","getDotColor","findSquare","wall","rowIndex","cellIndex","length","color","width","window","innerWidth","height","innerHeight","rightCorner","getSquareRightCornerBrowserCoordinates","filter","strokeWidth","stroke","newSquares","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","functions","getFunctions","httpsCallable","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ccef83d7.chunk.js","sourcesContent":["export interface Square {\n    center: IPoint;\n    type: \"wall\" | \"start\" | \"end\";\n    color: SquareColors;\n  }\n export enum SquareColors {\n    wall = \"#6e97cc\",\n    start = \"#3CE1BB\",\n    end = \"#ff4154\",\n  }\nexport const pathColor = \"#3CE1BB\";\nexport const pathShortestColor = \"#ffffff\";\nexport interface IPoint {\n    x: number;\n    y: number;\n  }\n export interface IPath {\n    points: IPoint[];\n    isShortest?: boolean;\n    // canvasPoints: number[];\n  }","import React, { useState } from \"react\";\nimport \"./toolTips.css\";\ninterface TooltipProps {\n  visible?: boolean;\n  onSetStart: () => void;\n  onSetEnd: () => void;\n  onSetWall: () => void;\n}\nexport const Tooltip = (props: TooltipProps) => {\n  const [visible, setVisible] = useState<boolean>(false);\n  return (\n    <>\n      <div className=\"wrapper\" onClick={() => setVisible(true)}>\n        <input type=\"checkbox\" checked={visible} />\n        <div className=\"tooltip\">\n          <span\n            onClick={(e) => {\n              setVisible(false);\n              props.onSetStart();\n              e.stopPropagation();\n            }}\n          >\n            Start\n          </span>\n          <span\n            onClick={(e) => {\n              setVisible(false);\n              props.onSetWall();\n              e.stopPropagation();\n            }}\n          >\n            Wall\n          </span>\n          <span\n            onClick={(e) => {\n              setVisible(false);\n\n              props.onSetEnd();\n              e.stopPropagation();\n            }}\n          >\n            End\n          </span>\n          <span\n            onClick={(e) => {\n              setVisible(false);\n              e.stopPropagation();\n            }}\n          >\n            Cancel\n          </span>\n        </div>\n      </div>\n\n      <svg xmlns=\"http://www.w3.org/2000/svg\" style={{ display: \"none\" }}>\n        <symbol\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 26 22\"\n          id=\"icon-01\"\n        >\n          <path\n            d=\"M18.29,5.76l-.7-1.37A2.59,2.59,0,0,0,15.29,3H10.71a2.59,2.59,0,0,0-2.3,1.39l-.7,1.37a2.6,2.6,0,0,1-2.3,1.39H3.58A2.57,2.57,0,0,0,1,9.71V20.44A2.57,2.57,0,0,0,3.58,23H22.42A2.57,2.57,0,0,0,25,20.44V9.71a2.57,2.57,0,0,0-2.58-2.56H20.59A2.6,2.6,0,0,1,18.29,5.76Z\"\n            transform=\"translate(0 -2)\"\n          />\n          <ellipse cx=\"13\" cy=\"12.99\" rx=\"4.52\" ry=\"4.49\" />\n        </symbol>\n        <symbol\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 26 22\"\n          id=\"icon-02\"\n        >\n          <line x1=\"25\" y1=\"12.58\" x2=\"25\" y2=\"9.42\" />\n          <line x1=\"21\" y1=\"14.16\" x2=\"21\" y2=\"7.84\" />\n          <line x1=\"17\" y1=\"15.74\" x2=\"17\" y2=\"6.26\" />\n          <line x1=\"13\" y1=\"21\" x2=\"13\" y2=\"1\" />\n          <line x1=\"9\" y1=\"17.32\" x2=\"9\" y2=\"4.68\" />\n          <line x1=\"5\" y1=\"13.63\" x2=\"5\" y2=\"8.37\" />\n          <line x1=\"1\" y1=\"11.53\" x2=\"1\" y2=\"10.47\" />\n        </symbol>\n        <symbol\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 26 22\"\n          id=\"icon-03\"\n        >\n          <polygon points=\"8.08 10 1 21 25 21 18.09 12.66 13.78 17.45 8.08 10\" />\n          <circle cx=\"8\" cy=\"4\" r=\"3\" />\n        </symbol>\n      </svg>\n    </>\n  );\n};\n","import React from \"react\";\nimport { pathColor, pathShortestColor } from \"../Board/interfaces\";\nimport \"./styles.css\";\ninterface MenuProps {\n  onStartSearch: () => void;\n  clearAll: () => void;\n  clearWalls: () => void;\n  ShowAllPaths: () => void;\n}\nexport const Menu = (props: MenuProps) => {\n  return (\n    <div id=\"play_panel\">\n      <p>Choose end node and start node on grid</p>\n      <button\n        className=\"menu-button\"\n        onClick={() => {\n          props.onStartSearch();\n        }}\n      >\n        Start search\n      </button>\n      <button\n        className=\"menu-button\"\n        onClick={() => {\n          props.clearAll();\n        }}\n      >\n        Clear all\n      </button>\n      <button\n        className=\"menu-button\"\n        onClick={() => {\n          props.clearWalls();\n        }}\n      >\n        Clear walls\n      </button>\n      <button\n        className=\"menu-large-button\"\n        onClick={() => {\n          props.ShowAllPaths();\n        }}\n      >\n        Show all paths\n      </button>\n      <div className=\"map\">\n        <div className=\"map-item\">\n          <div\n            className=\"line\"\n            style={{ backgroundColor: pathShortestColor }}\n          ></div>\n          <div className=\"instruction\">The shortest path with minimal turns</div>\n        </div>\n        <div className=\"map-item\">\n          <div className=\"line\" style={{ backgroundColor: pathColor }}></div>\n          <div className=\"instruction\">One of the shortest paths</div>\n        </div>\n        {/* <div className=\"map-item\">\n          <div className=\"line\">\n            <div\n              className=\"square\"\n              style={{ backgroundColor: SquareColors.start }}\n            ></div>\n          </div>\n          <div className=\"instruction\"> Start</div>\n        </div> */}\n      </div>\n    </div>\n  );\n};\n","import { IPoint } from \"astar-typescript/dist/interfaces/astar.interfaces\";\nimport { IPath, Square } from \"./interfaces\";\nexport const CellSize = 50;\n\n// If a dot was in board limit, it shouldn't be clickable\nexport function isDotInBoardLimit(\n    dot: IPoint,\n    cellsLength: number,\n    rowsLength: number\n  ): boolean {\n    return dot.x + 1 === cellsLength || dot.y + 1 === rowsLength;\n  }\n// Convert from board's coordinates to browser's coordinates \n export function getBrowserPathPointsInCanvasFormat(path: IPath): number[] {\n    const results: number[] = [];\n    const repereOrigine = getRepereOriginBrowserCoordinates();\n  \n    path.points.forEach((p) => {\n      const browserCoordinates: IPoint = {\n        x: p.x * CellSize + repereOrigine.x,\n        y: p.y * CellSize + repereOrigine.y,\n      };\n      results.push(browserCoordinates.x);\n      results.push(browserCoordinates.y);\n    });\n    return results;\n  }\n//Get corners coordinates in origin repere\n export  function getSquareRightCornerBrowserCoordinates(square: Square): IPoint {\n    const repereOrigine = getRepereOriginBrowserCoordinates();\n    return {\n      x: square.center.x * CellSize - CellSize / 2 + repereOrigine.x,\n      y: square.center.y * CellSize - CellSize / 2 + repereOrigine.y,\n    };\n  }\n//\n export function getRepereOriginBrowserCoordinates(): IPoint {\n    const boardStart = getBrowserCoordinatesOfHtmlElement(\n      document.getElementById(\"board\")\n    ); // board start\n    return { x: boardStart.x + CellSize, y: boardStart.y + CellSize };\n  }\n  //To get coordinates of any html elemnt in browser repere\n  // copied from stackoverflow\n export function getBrowserCoordinatesOfHtmlElement(element: any) {\n    // yay readability\n    for (\n      var lx = 0, ly = 0;\n      element != null;\n      lx += element.offsetLeft,\n        ly += element.offsetTop,\n        element = element.offsetParent\n    );\n    return { x: lx, y: ly };\n  }\n  ","import React, { useState } from \"react\";\nimport { Stage, Layer, Rect, Line } from \"react-konva\";\nimport \"./Board.css\";\nimport { Tooltip } from \"../tooltip/ToolTip\";\nimport { Menu } from \"../menu/Menu\";\nimport {\n  IPath,\n  pathColor,\n  Square,\n  SquareColors,\n  IPoint,\n  pathShortestColor,\n} from \"./interfaces\";\nimport {\n  CellSize,\n  getBrowserPathPointsInCanvasFormat,\n  getSquareRightCornerBrowserCoordinates,\n  isDotInBoardLimit,\n} from \"./helpers\";\nimport { pathfinding } from \"../../App\";\n//Create Board\nexport const Board = () => {\n  const [board] = useState(\n    new Array(15).fill(0).map((row) => new Array(15).fill(0))\n  );\n  const [squares, setSquares] = useState<Square[]>([]);\n  //nts; paths will hold the state and setPaths is the method that will allow us to update the IPath[] state.\n  const [paths, setPaths] = useState<IPath[]>([]);\n  const [start, setStart] = useState<Square>();\n  const [end, setEnd] = useState<Square>();\n  const [showAllPaths, setShowAllPaths] = useState<boolean>();\n\n  const getMatrix = () => {\n    const rows: number[][] = [];\n    board.forEach((row, rowIdx) => {\n      const cells: number[] = [];\n      row.forEach((cell, cellIdx) => {\n        const square = squares.find(\n          (s) => s.center.y === rowIdx && s.center.x === cellIdx\n        );\n        if (!square) {\n          cells.push(0);\n        } else if (square.type === \"wall\") {\n          cells.push(1);\n        } else if (square.type === \"start\" && square !== start) cells.push(1);\n        else if (square.type === \"end\" && square !== end) cells.push(1);\n        else cells.push(0);\n      });\n      rows.push(cells);\n    });\n    return rows;\n  };\n  const isThePointInAPath = (point: IPoint): boolean => {\n    const findPath = paths.find((path) =>\n      path.points.find((p) => p.x === point.x && p.y === point.y)\n    );\n    if (findPath && (findPath.isShortest || showAllPaths)) return true;\n    else return false;\n  };\n  const addSquare = (square: Square) => {\n    // setPath(undefined);\n    const oldSquareIndex = squares.findIndex(\n      (s) => s.center.x === square.center.x && s.center.y === square.center.y\n    );\n    console.log(isThePointInAPath(square.center));\n    if (oldSquareIndex >= 0) {\n      const oldSquare = squares[oldSquareIndex];\n      if (oldSquare.type === \"start\" || oldSquare.type === \"end\") {\n        // do nothing\n        return;\n      }\n    } else if (isThePointInAPath(square.center)) {\n      // do nothing\n      return;\n    }\n    if (square.type === \"start\") {\n      if (start) {\n        const oldStartIndex = squares.findIndex(\n          (s) => s.center.x === start.center.x && s.center.y === start.center.y\n        );\n        squares.splice(oldStartIndex, 1);\n        setStart(square);\n      } else {\n        setStart(square);\n      }\n    } else if (square.type === \"end\") {\n      if (end) {\n        const oldEndIndex = squares.findIndex(\n          (s) => s.center.x === end.center.x && s.center.y === end.center.y\n        );\n        squares.splice(oldEndIndex, 1);\n        setEnd(square);\n      } else {\n        setEnd(square);\n      }\n    } else {\n    }\n    if (oldSquareIndex >= 0) {\n      // delete the old square\n      squares.splice(oldSquareIndex, 1);\n    }\n\n    setSquares([...squares, square]);\n  };\n  const clearAll = () => {\n    setPaths([]);\n    setStart(undefined);\n    setEnd(undefined);\n    setSquares([]);\n  };\n  const clearWalls = () => {\n    const newSquares: Square[] = [];\n    squares.forEach((square) => {\n      if (square.type !== \"wall\") newSquares.push(square);\n    });\n    setSquares(newSquares);\n  };\n  const search = async () => {\n    if (start && end) {\n      const matrix = getMatrix();\n      console.log(matrix);\n      const result = await pathfinding({\n        start: start.center,\n        end: end.center,\n        grid: matrix,\n      });\n      const shortestPaths: IPath[] = result.data as IPath[];\n      console.log(shortestPaths);\n      // const algorithm = new Astar(matrix);\n      /*       const result = algorithm.finShortestPath(\n        {\n          x: start.center.x,\n          y: start.center.y,\n        },\n        {\n          x: end.center.x,\n          y: end.center.y,\n        }\n      ); */\n      //  const shortestPath = getPathPoints(result);\n      // const shortPath = shortestPath.find((path) => path.isShortest);\n      //setPaths([...paths, ...shortestPath]);\n      setPaths([...paths, ...shortestPaths]);\n      setStart(undefined);\n      setEnd(undefined);\n    }\n  };\n\n  const getDotColor = (dot: IPoint): string => {\n    const findSquare = squares.find(\n      (square) => square.center.x === dot.x && square.center.y === dot.y\n    );\n    if (findSquare) {\n      if (findSquare.type === \"start\") return SquareColors.start;\n      else if (findSquare.type === \"end\") return SquareColors.end;\n      else return SquareColors.wall;\n    } else if (isThePointInAPath(dot)) {\n      // check if there's a path cross this dot\n      return pathColor;\n    }\n    return SquareColors.wall;\n  };\n\n  return (\n    <div className=\"ctn-board\">\n      <div id=\"board\" className=\"board\">\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((cell, cellIndex) => {\n              const dot: IPoint = { x: cellIndex, y: rowIndex };\n              return (\n                <div key={dot.x} className=\"cell\">\n                  {!isDotInBoardLimit(dot, row.length, board.length) && (\n                    <div\n                      className=\"dot\"\n                      style={{\n                        backgroundColor: getDotColor(dot),\n                      }}\n                      onClick={() => {\n                        console.log(`x :${dot.x} , y: ${dot.y}`);\n                      }}\n                    >\n                      <Tooltip\n                        onSetEnd={() => {\n                          addSquare({\n                            center: dot,\n                            type: \"end\",\n                            color: SquareColors.end,\n                          });\n                        }}\n                        onSetStart={() => {\n                          addSquare({\n                            center: dot,\n                            type: \"start\",\n                            color: SquareColors.start,\n                          });\n                        }}\n                        onSetWall={() => {\n                          addSquare({\n                            center: dot,\n                            type: \"wall\",\n                            color: SquareColors.wall,\n                          });\n                        }}\n                      />\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        ))}\n        <Stage width={window.innerWidth} height={window.innerHeight}>\n          <Layer>\n            {squares.map((square) => {\n              const rightCorner =\n                getSquareRightCornerBrowserCoordinates(square);\n              return (\n                <Rect\n                  x={rightCorner.x}\n                  y={rightCorner.y}\n                  width={CellSize}\n                  height={CellSize}\n                  onClick={(e) => {}}\n                  fill={square.color}\n                />\n              );\n            })}\n            {paths\n              .filter((path) => path.isShortest)\n              .map((path) => (\n                <Line\n                  points={getBrowserPathPointsInCanvasFormat(path)}\n                  strokeWidth={4}\n                  // tension={0.1}\n                  stroke={pathShortestColor}\n                />\n              ))}\n            {showAllPaths &&\n              paths\n                .filter((path) => !path.isShortest)\n                .map((path) => (\n                  <Line\n                    points={getBrowserPathPointsInCanvasFormat(path)}\n                    strokeWidth={4}\n                    // tension={0.1}\n                    stroke={pathColor}\n                  />\n                ))}\n          </Layer>\n        </Stage>\n      </div>\n      <Menu\n        onStartSearch={search}\n        clearWalls={clearWalls}\n        clearAll={clearAll}\n        ShowAllPaths={() => setShowAllPaths(!showAllPaths)}\n      />\n    </div>\n  );\n};\n\nexport default Board;\n","import { Board } from \"./Optimized-path-finder/Board/Board\";\nimport \"./App.css\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFunctions, httpsCallable } from \"firebase/functions\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAOh33-NCPkemiF_SIOVvSRP-AeGs_-wxk\",\n  authDomain: \"optimized-path-finder-1a74f.firebaseapp.com\",\n  projectId: \"optimized-path-finder-1a74f\",\n  storageBucket: \"optimized-path-finder-1a74f.appspot.com\",\n  messagingSenderId: \"221335645760\",\n  appId: \"1:221335645760:web:ed229600239c9909a339a5\",\n  measurementId: \"G-1ZGCWNPC48\",\n};\nconst app = initializeApp(firebaseConfig);\nconst functions = getFunctions(app);\n\nexport const pathfinding = httpsCallable(functions, \"pathfinding\");\n// connectFunctionsEmulator(functions, \"localhost\", 5001);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board></Board>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}